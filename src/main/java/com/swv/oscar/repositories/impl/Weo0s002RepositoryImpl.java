package com.swv.oscar.repositories.impl;

import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.TypedQuery;

import org.springframework.stereotype.Repository;

import com.swv.oscar.dataobject.common.Weo0s002BO;
import com.swv.oscar.domain.entity.Weovcase;
import com.swv.oscar.domain.entity.Weovcaseload;
import com.swv.oscar.domain.entity.WeovpanelAssign;
import com.swv.oscar.domain.entity.WeovpanelDesc;
import com.swv.oscar.domain.entity.WeovvalidValues;
import com.swv.oscar.domain.entity.Weovworker;
import com.swv.oscar.exceptions.OscarDataAccessException;
import com.swv.oscar.repositories.IWeo0s002Repository;
import com.swv.oscar.util.OscarLogger;

/*************************************************************************
 *
 * SWV CONFIDENTIAL
 * _________________________________________________________________________________
 *
 * SWV is a trademark of SWV Company.
 *
 * Copyright © 2017 SWV. All rights reserved.
 *
 * NOTICE: All information contained herein is, and remains the property of SWV
 * and its suppliers, if any. The intellectual and technical concepts contained
 * herein are proprietary to SWV and its suppliers and may be covered by U.S.
 * and Foreign Patents, patents in process, and are protected by trade secret or
 * copyright law. Dissemination of this information or reproduction of this
 * material is strictly forbidden unless prior written permission is obtained
 * from SWV.
 *
 *************************************************************************/
// Author : Generated by ATMA ®
// Revision History :
@Repository
public class Weo0s002RepositoryImpl implements IWeo0s002Repository {

    private static final OscarLogger LOGGER = OscarLogger.create(Weo0s002RepositoryImpl.class);

    @PersistenceContext
    private EntityManager entityMgr;

    /*
      * Method executeCheckUpdateAccessQuery0
      * @param weo0s002BOReq
      * @return weo0s002BOResp
      * @throws OscarDataAccessException
    */
    @Override
    public Weo0s002BO executeCheckUpdateAccessQuery0(String query) throws OscarDataAccessException {
        LOGGER.debug("Request: "+ query);
        Weo0s002BO  weo0s002BOResp = new Weo0s002BO();
        try {
            TypedQuery<WeovpanelDesc> typedQuery = (TypedQuery<WeovpanelDesc>)entityMgr.createNativeQuery(query);
            List<WeovpanelDesc>  entityList = typedQuery.getResultList();
            //TODO need to find the framework    ObjectCopier.copy(entityList, weo0s002BOResp);
        } catch (Exception ex) {
            LOGGER.error("Error: " + ex);
            throw new OscarDataAccessException(ex);
        }
        LOGGER.debug("Response: "+weo0s002BOResp);
        return weo0s002BOResp;
    }
    /*
      * Method executeCheckUpdateAccessQuery1
      * @param weo0s002BOReq
      * @return weo0s002BOResp
      * @throws OscarDataAccessException
    */
    @Override
    public Weo0s002BO executeCheckUpdateAccessQuery1(String query) throws OscarDataAccessException {
        LOGGER.debug("Request: "+ query);
        Weo0s002BO  weo0s002BOResp = new Weo0s002BO();
        try {
            TypedQuery<WeovvalidValues> typedQuery = (TypedQuery<WeovvalidValues>)entityMgr.createNativeQuery(query);
            List<WeovvalidValues>  entityList = typedQuery.getResultList();
            //TODO need to find the framework  ObjectCopier.copy(entityList, weo0s002BOResp);
        } catch (Exception ex) {
            LOGGER.error("Error: " + ex);
            throw new OscarDataAccessException(ex);
        }
        LOGGER.debug("Response: "+weo0s002BOResp);
        return weo0s002BOResp;
    }
    /*
      * Method executeGetRegionsQuery2
      * @param weo0s002BOReq
      * @return weo0s002BOResp
      * @throws OscarDataAccessException
    */
    @Override
    public Weo0s002BO executeGetRegionsQuery2(String query) throws OscarDataAccessException {
        LOGGER.debug("Request: "+ query);
        Weo0s002BO  weo0s002BOResp = new Weo0s002BO();
        try {
            TypedQuery<Weovworker> typedQuery = (TypedQuery<Weovworker>)entityMgr.createNativeQuery(query);
            List<Weovworker>  entityList = typedQuery.getResultList();
            //TODO need to find the framework   ObjectCopier.copy(entityList, weo0s002BOResp);
        } catch (Exception ex) {
            LOGGER.error("Error: " + ex);
            throw new OscarDataAccessException(ex);
        }
        LOGGER.debug("Response: "+weo0s002BOResp);
        return weo0s002BOResp;
    }
    /*
      * Method executeGetRegionsQuery3
      * @param weo0s002BOReq
      * @return weo0s002BOResp
      * @throws OscarDataAccessException
    */
    @Override
    public Weo0s002BO executeGetRegionsQuery3(String query) throws OscarDataAccessException {
        LOGGER.debug("Request: "+ query);
        Weo0s002BO  weo0s002BOResp = new Weo0s002BO();
        try {
            TypedQuery<Weovcaseload> typedQuery = (TypedQuery<Weovcaseload>)entityMgr.createNativeQuery(query);
            List<Weovcaseload>  entityList = typedQuery.getResultList();
            //TODO need to find the framework  ObjectCopier.copy(entityList, weo0s002BOResp);
        } catch (Exception ex) {
            LOGGER.error("Error: " + ex);
            throw new OscarDataAccessException(ex);
        }
        LOGGER.debug("Response: "+weo0s002BOResp);
        return weo0s002BOResp;
    }
    /*
      * Method executeCheckModeQuery4
      * @param weo0s002BOReq
      * @return weo0s002BOResp
      * @throws OscarDataAccessException
    */
    @Override
    public Weo0s002BO executeCheckModeQuery4(String query) throws OscarDataAccessException {
        LOGGER.debug("Request: "+ query);
        Weo0s002BO  weo0s002BOResp = new Weo0s002BO();
        try {
            TypedQuery<WeovpanelAssign> typedQuery = (TypedQuery<WeovpanelAssign>)entityMgr.createNativeQuery(query);
            List<WeovpanelAssign>  entityList = typedQuery.getResultList();
            //TODO need to find the framework   ObjectCopier.copy(entityList, weo0s002BOResp);
        } catch (Exception ex) {
            LOGGER.error("Error: " + ex);
            throw new OscarDataAccessException(ex);
        }
        LOGGER.debug("Response: "+weo0s002BOResp);
        return weo0s002BOResp;
    }
    /*
      * Method executeGetSpluCaseloadQuery5
      * @param weo0s002BOReq
      * @return weo0s002BOResp
      * @throws OscarDataAccessException
    */
    @Override
    public Weo0s002BO executeGetSpluCaseloadQuery5(String query) throws OscarDataAccessException {
        LOGGER.debug("Request: "+ query);
        Weo0s002BO  weo0s002BOResp = new Weo0s002BO();
        try {
            TypedQuery<Weovcase> typedQuery = (TypedQuery<Weovcase>)entityMgr.createNativeQuery(query);
            List<Weovcase>  entityList = typedQuery.getResultList();
            //TODO need to find the framework  ObjectCopier.copy(entityList, weo0s002BOResp);
        } catch (Exception ex) {
            LOGGER.error("Error: " + ex);
            throw new OscarDataAccessException(ex);
        }
        LOGGER.debug("Response: "+weo0s002BOResp);
        return weo0s002BOResp;
    }
}